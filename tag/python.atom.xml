<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>FRidh's blog - python</title><link href="http://fridh.nl/" rel="alternate"></link><link href="http://fridh.nl/tag/python.atom.xml" rel="self"></link><id>http://fridh.nl/</id><updated>2014-04-07T00:00:00+02:00</updated><entry><title>Sparse arrays in Python</title><link href="http://fridh.nl/2014/04/07/sparse-arrays-in-python/" rel="alternate"></link><published>2014-04-07T00:00:00+02:00</published><updated>2014-04-07T00:00:00+02:00</updated><author><name>Frederik Rietdijk</name></author><id>tag:fridh.nl,2014-04-07:/2014/04/07/sparse-arrays-in-python/</id><summary type="html">&lt;p&gt;Numpy offers dense arrays and both &lt;a href="http://www.numpy.org/"&gt;Numpy&lt;/a&gt; and
&lt;a href="http://scipy.org/"&gt;Scipy&lt;/a&gt; offer sparse matrices. However, they don't
offer any sparse array solution. On the web I found some implementations
of sparse arrays but they were generally quite limited:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/ndsparse"&gt;ndsparse&lt;/a&gt; operators only support
    scalars&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.maths.lth.se/matematiklth/personal/solem/downloads/sparray.py"&gt;sparray&lt;/a&gt;
    operators only support other sparse arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I would like to do is replace in some of my calculations certain
dense arrays with sparse arrays. Numpy compatibility is therefore
important. A first version can be found
&lt;a href="https://github.com/FRidh/sparse"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What works?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The basic operators work with scalars, sparse arrays and dense
    arrays.&lt;/li&gt;
&lt;li&gt;Basic slicing is partially supported. newaxis, None, slice and
    Ellipsis aren't really supported yet.&lt;/li&gt;
&lt;li&gt;Converting from dense to sparse and vice versa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's left to do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finish basic slicing&lt;/li&gt;
&lt;li&gt;In-place operators&lt;/li&gt;
&lt;li&gt;Advanced slicing&lt;/li&gt;
&lt;li&gt;Enforcing dtype&lt;/li&gt;
&lt;li&gt;Cythonize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because I was curious I Cythonized it quickly. While it is much much
faster than the plain Python implementation it still is about a factor
1000 slower than dense arrays when operatoring with a dense array.
Unfortunately this is too slow for my use case, so for now I reverted to
using dense arrays but with a reduced model size. Nevertheless I am sure
there is a significant performance increase possible.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Numpy offers dense arrays and both &lt;a href="http://www.numpy.org/"&gt;Numpy&lt;/a&gt; and
&lt;a href="http://scipy.org/"&gt;Scipy&lt;/a&gt; offer sparse matrices. However, they don't
offer any sparse array solution. On the web I found some implementations
of sparse arrays but they were generally quite limited:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://launchpad.net/ndsparse"&gt;ndsparse&lt;/a&gt; operators only support
    scalars&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.maths.lth.se/matematiklth/personal/solem/downloads/sparray.py"&gt;sparray&lt;/a&gt;
    operators only support other sparse arrays&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What I would like to do is replace in some of my calculations certain
dense arrays with sparse arrays. Numpy compatibility is therefore
important. A first version can be found
&lt;a href="https://github.com/FRidh/sparse"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What works?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The basic operators work with scalars, sparse arrays and dense
    arrays.&lt;/li&gt;
&lt;li&gt;Basic slicing is partially supported. newaxis, None, slice and
    Ellipsis aren't really supported yet.&lt;/li&gt;
&lt;li&gt;Converting from dense to sparse and vice versa&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What's left to do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Finish basic slicing&lt;/li&gt;
&lt;li&gt;In-place operators&lt;/li&gt;
&lt;li&gt;Advanced slicing&lt;/li&gt;
&lt;li&gt;Enforcing dtype&lt;/li&gt;
&lt;li&gt;Cythonize&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Because I was curious I Cythonized it quickly. While it is much much
faster than the plain Python implementation it still is about a factor
1000 slower than dense arrays when operatoring with a dense array.
Unfortunately this is too slow for my use case, so for now I reverted to
using dense arrays but with a reduced model size. Nevertheless I am sure
there is a significant performance increase possible.&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Blogging with Pelican</title><link href="http://fridh.nl/2014/03/09/blogging-with-pelican/" rel="alternate"></link><published>2014-03-09T18:20:00+01:00</published><updated>2014-03-09T18:20:00+01:00</updated><author><name>Frederik Rietdijk</name></author><id>tag:fridh.nl,2014-03-09:/2014/03/09/blogging-with-pelican/</id><summary type="html">&lt;p&gt;Joining many others I've just switched my blog from Wordpress to Pelican. Writing posts in Markdown or ReStructuredText and no more Wordpress upgrades, yay :-)&lt;/p&gt;</summary><content type="html">&lt;p&gt;Joining many others I've just switched my blog from Wordpress to Pelican. Writing posts in Markdown or ReStructuredText and no more Wordpress upgrades, yay :-)&lt;/p&gt;</content><category term="python"></category></entry></feed>